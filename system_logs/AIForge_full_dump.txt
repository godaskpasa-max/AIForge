=== ./forge_logs/live_commands.log ===
==========================
–ß—Ç 28 –∞–≤–≥ 2025 10:10:15 CEST: /mnt/MEGA/MEGA/mega/–ü–∞–ø–∫–∞/AIForge
$ ls -la
–∏—Ç–æ–≥–æ 480
drwxr-xr-x 11 pasa pasa 32768 –∞–≤–≥ 28 02:22 .
drwxr-xr-x  3 pasa pasa 32768 –∞–≤–≥ 28 00:18 ..
drwxr-xr-x  2 pasa pasa 32768 –∞–≤–≥ 28 00:18 ai_clients
drwxr-xr-x  2 pasa pasa 32768 –∞–≤–≥ 28 00:18 browser_engine
drwxr-xr-x  2 pasa pasa 32768 –∞–≤–≥ 28 00:18 experiments
drwxr-xr-x  2 pasa pasa 32768 –∞–≤–≥ 28 10:10 forge_logs
drwxr-xr-x  9 pasa pasa 32768 –∞–≤–≥ 28 10:02 .git
-rwxr-xr-x  1 pasa pasa  7370 –∞–≤–≥ 28 01:54 .gitignore
-rwxr-xr-x  1 pasa pasa  1071 –∞–≤–≥ 28 01:54 LICENSE
drwxr-xr-x  2 pasa pasa 32768 –∞–≤–≥ 28 00:18 office_integration
drwxr-xr-x  3 pasa pasa 32768 –∞–≤–≥ 28 02:22 publications
-rwxr-xr-x  1 pasa pasa  1484 –∞–≤–≥ 28 01:54 README.md
-rwxr-xr-x  1 pasa pasa  1468 –∞–≤–≥ 28 02:11 RULES.md
drwxr-xr-x  2 pasa pasa 32768 –∞–≤–≥ 28 00:18 tools
drwxr-xr-x  2 pasa pasa 32768 –∞–≤–≥ 28 00:18 voice_system
Exit code: 0

==========================
–ß—Ç 28 –∞–≤–≥ 2025 10:10:15 CEST: /mnt/MEGA/MEGA/mega/–ü–∞–ø–∫–∞/AIForge
$ git status
–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: main
Last commands done (2 commands done):
   pick cbf2434 üî• AIForge: –ö—É–∑–Ω–∏—Ü–∞ –∑–∞–ø—É—â–µ–Ω–∞!
   pick 247b455 üìã Add licenses and .gitignore
–ö–æ–º–∞–Ω–¥ –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å.
–í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –∫–æ–º–º–∏—Ç –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –≤–µ—Ç–∫–∏  ¬´main¬ª –Ω–∞–¥ ¬´0d0a24c¬ª.
  (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´git commit --amend¬ª, —á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç)
  (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´git rebase --continue¬ª, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –¥–æ–≤–æ–ª—å–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏)

–ò–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–º–º–∏—Ç:
  (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´git restore --staged <—Ñ–∞–π–ª>...¬ª, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–∑ –∏–Ω–¥–µ–∫—Å–∞)
	–Ω–æ–≤—ã–π —Ñ–∞–π–ª:    forge_logs/.last_push

–ò–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤ –∏–Ω–¥–µ–∫—Å–µ –¥–ª—è –∫–æ–º–º–∏—Ç–∞:
  (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´git add <—Ñ–∞–π–ª>...¬ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ –∏–Ω–¥–µ–∫—Å)
  (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´git restore <—Ñ–∞–π–ª>...¬ª, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–±–æ—á–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ)
	–∏–∑–º–µ–Ω–µ–Ω–æ:      publications/first_release/001_intro.md

Exit code: 0

=== ./forge_logs/.last_push ===
1756368615
=== ./README.md ===
AIForge Advanced Adult Content License v1.0

Copyright (c) 2025 godaskpasa-max

STRICT AGE RESTRICTION: 21+ YEARS ONLY
This software is exclusively for users who are 21 years of age or older, regardless of local age of majority laws.

PROHIBITED USERS:
- Anyone under 21 years of age
- Legal entities representing minors or educational institutions
- Individuals with documented mental health conditions may impair judgment
- Users in jurisdictions where such content is prohibited

CONTENT DISCLAIMER:
- All generated content is ENTIRELY FICTIONAL and AI-created
- Any resemblance to real persons, living or dead, is purely coincidental
- Content may include highly realistic but completely artificial representations
- All text, video, audio, and 3D materials are products of artificial intelligence
- Content may represent fantasies or fictional scenarios, including those of individuals with mental health conditions

DISTRIBUTION LIABILITY:
- Users who distribute this software to prohibited individuals bear FULL LEGAL RESPONSIBILITY
- Violation of age restrictions may result in criminal and civil liability
- Users must verify recipient eligibility before any distribution

LEGAL PROTECTION:
- Software creator disclaims all liability for misuse
- Users assume all risks and legal responsibilities
- Compliance with local laws is user's sole responsibility

LICENSE MODIFICATION:
This license may be updated at any time. Continued use constitutes acceptance of modifications.
=== ./.git/hooks/post-update.sample ===
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info
=== ./.git/hooks/pre-rebase.sample ===
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END
=== ./.git/hooks/update.sample ===
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0
=== ./.git/hooks/pre-commit.sample ===
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
=== ./.git/hooks/pre-merge-commit.sample ===
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:
=== ./.git/hooks/commit-msg.sample ===
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}
=== ./.git/hooks/prepare-commit-msg.sample ===
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi
=== ./.git/hooks/pre-receive.sample ===
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi
=== ./.git/hooks/fsmonitor-watchman.sample ===
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}
=== ./.git/hooks/pre-applypatch.sample ===
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:
=== ./.git/hooks/applypatch-msg.sample ===
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:
=== ./.git/hooks/pre-push.sample ===
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0
=== ./.git/hooks/sendemail-validate.sample ===
#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi
=== ./.git/hooks/push-to-checkout.sample ===
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi
=== ./.git/description ===
Unnamed repository; edit this file 'description' to name the repository.
=== ./.git/info/exclude ===
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~
=== ./.git/refs/heads/main ===
38f917e5b6b79624a055e8563e86dfc576af566a
=== ./.git/objects/62/583174deccb598fce9204aa8ec42e57fac7068 ===
xeR\CDJam=Oq\CBMEn\82 \DCI\F4\B7\88\9E!I"\90\8C\C8}3\96\86VJXAn’ú\D4—ô^\E1\DCW\E8\EA:ﬂßY\D0b\EF\BD\DF9\F7\9C\F3M*\93M\C9\C2\E2\FCDL\BE\AA/\92\_\C9\EC\A4%.\B8\D5<:\D1\D5\82jq\BC\EB"\F8\D4\E3\BB\E58\B1\98\A0n
a/\CF\C9 \E1\C4I\F5|-x2`\B4\E0Îë∫h\A0\AF\E7\B5\88\B7\C4\A0œ©œé'\D3K\99\AD\DCvzN6\F7\D3{\C9\F59\E1,\E2\89_\8C?ci+«Ç{=\A6&wD\85w\9E
\B8\C3uG*\BB\86\94‘ØT€†z\B3\A6g\F1\E7\82K\DB5\DE(ÃÇB3\B7\CEB\CB:\B2F \D23\EB!0\95\88\A5(\DD|vÀÇ
[IÃÅ\8F/\B4o\E2i\B0\EC_f\AD\A0\C5L\C5B\ABu#0TW=F\92\E7k_\8Bbq\FB\DB$\A9\A7\A7D\D3\FF0\E0G\A1\9E\8Cv\A9‹∫\D2r\C2Y\DD=\À•\E4\A3P\95\8D\E5’§\FD\83;\EA\87«≥\E5\FCC\EE\D9)\
\EF\ED\E7\9E\FD\F1`\97\BD\A1Mx\89z\\92\FC\BD}jF\93⁄ögF\8C\D1\E4‘¨\F3
KkU=== ./.git/objects/93/872cff5f63c82ae1d0bf2cc7d7acc5370688a6 ===
x+)JMU06g040031Qrut\F1u\D5\CBMaH\8A0,\B9wf\EB\8C?/\BCV\BCqzZ\BF\A6 \00FL\9A=== ./.git/objects/cb/f243499ffddae9ef6fa7ef5e971d6c81dc20a7 ===
xK\CE\CF\CD\CD,Q022d()JMU\B04\B607JNK3M33N\B60JL5L1HJ3JN6O1OLN65670\B3\B0H4\E3J,-\C9\C8/RH\CFOI,\CE.H,N\D4\CDM\ACP\B0A\F0\D2s3s\F4\92\F3s\ED\CDMÕå\8D\8D\8D,\CD\B4
\8C\B8\80\A2@kKR\C96\80\EB\C3\FC)K=\DD\F2\8B\D2S\AD.Ã∫\D8|a\FB\85\BDv\l\BB\B0A\C8\DCpa\FF\C5Êãù\B67(r\00f^U\C0=== ./.git/objects/e1/ba2a73230451f97fdf7a9291b1eb385bfcac93 ===
x=\90\CBN1\86\BB\F6S\FCKPCQ\91\AA\EE\A2(E#q\A9\92lP\C5\C2\9FL,f\EC\91m(Ÿµ,zH\BC
 E\DC\FA
\F6\F5\CCP\D8\F8\t|\CE\FF\FD\D3\D2N\F1\E1\E3\F6\BB\BDl\82]\9D\93\F1\84\B5q\90FI\A7÷Ö\D8z\E1t1X\CB\D7\D1\DB\ECm\A3\B0J\FA\E3Zz\B9Q\C93!\BE\90\AB\B4\F7\DAh\8F99\9A.P8i\A9f\8Ev\86|.]Ai\A8\C9y\FE`\A7Aj\A3M\89\9CO	\9Es^\E3\ED,|\93\8ExXAzos-y\94\CDO*2A\86\E6\DEL\97\E4\BB›Æ_\E3s\BCI\E9W\\C5\EBt\85\86'>\C5\FB\F43.\B9u\C7\D9’ë\E8g\9F-\AB\C0\C0\B28ﬁàO\B7\BA\9BB\8C'\A3l0Ag\88\D1\F0\A5\C8\F6?\A1\B7\F5\87\C3\FEh\8C\83\FD\DDC1i\F4\95\FF\BD\92u]j\F2-VY\A2\9Fmd»µZ\F3\97+TVQ\E9;8’ä,\C7@g\81C\83V\91\D2\B5\B3\EA$g<v\EEU\E3\AB-\DCm\\A6\E9-\DDo0\CFu\FA\C3L\E7q\95.\E28Y\C6G9G\FC\9B\BE\C7g\C4Gvd\D5\F6\F9m\8E\C4?\C6\DF=== ./.git/objects/9c/4624a9651a033dfc6b8691e251368b284dc8c0 ===
x+)JMU07e040031Q\D0K\CF,\C9L\CF\CB/Jex\B8K\ABX\99%\F0g\FD\FD\AAI7\BE\B6\88\FE\B3f2TU\90\AB\A3\8B\AF\AB^n
CR\84a…Ω3[g\FCy\A9\E0\B5\E2\8D\D3\D3\FA5\00\FA\CB!\EF=== ./.git/objects/24/7b4552fcec67cd2eec50f9072ce44ed0a3f5a8 ===
x\9D\8E\BBm\C30@Ss\8A\EB\FC\8B\82\C0\E5twT\88\98\A2!\D1@vH\99\B2\A2G\B0;\F7)\DF+\F5\D6\EA\00\C2\CB\D8D \93\8F\D6c\8E\C1\A0v\8E\C59\C5l\C4\E3b\9Am\F2L\89\B4\BA\E0&\EB\00\9A\8B\F5\CE\E7\
3J\96NR\82\E4\C9p\A4d\98\AC\C6I\E1u|\F6
\96Œ∏]p\C7C\C3ox{\F2iiX\CFG\EA\ED\CC\A2s\D1\AF\DAj\AD\F6\B19\E4\DFu\FB\FB\FD\81f8W\92u\97pe8.u\D4eÌõ®;\BB\88TG=== ./.git/objects/24/8f5a75a2b3fe6acd80872b8695070570780336 ===
xeR\DBNQ\F5y\BEbC\A4\F3\A0\F2@\EA%i\81\E2\8B?0S\A6u\E2tN3L\E1\95Nc T\A1!\A8\89∆®\E1u\A8\8C\94\B63\FC\C2>\BF\E0\E8'\B8ŒôV\9Bp\92^\F6e\AD\BD\D6>\C7\F6\84MKw\96n=\C8\AD.\97\9F*\AF=A\CD1\FE|\EE~\9F%z\FE¬°\A6\BAu+t\90\A5
g\CB\F1D\A3\EE\F8!m\8B\E0\E5f√™8d“∫j2+\9E\AB
\AE:\B5\C0
]\E1iK\B8\E8\A8?\84W$Q\AD\AA\D8j\86\9C\E8\A0\DBV\BDq_c<œ≠)\BC\88\EDM◊Ø\F3u”™0\8E?\C86_r\CA}\B9\C71\F1)\9F\9A|-w8\E3\842\C2o\CF0
\E23rmTF%\C3’∑\E2\AF
\CC=N\E4\8Elq\CCCy\C0\A9\DC\E7+\B84y\C0CTd"\9A{\ECY\CD
\A7H\CF\8E_^+j:\FEc\92yM{\BCK\FCI\EEBSkL\C5\D7\E8`FD\B25V\D9W\A4\A0\FE\B51‘´1W\F0\96\F8\9D\CE*o\A6A\A9\AAkg\A9fX3q&\DFhi\8A\C3\F7\BF\FB\E2c\A4 :\B0|\82}\B5\9E\E1P\F9Rc\89{\E8\C0V4\B4{\A6\A6\B2%#\AC\A4\8D⁄æ\DC'\8D\BB\D4\DF\E7 \8D\E4k\A0\E1?_\F0\A9|5Vÿár\EDJvJ∆ä\AE6m\FA\B5◊•\F5Âï≤\FE\C3\A1\E7\DF\F2\D0€π\C1\9Fs/\CC\F2Q~o\93{N&\CFR!2\FE\C9\80BO$”∑\CD|\B2\8Da’ú\CD\CC.\8F\F2C\BBzw\F1\DE"\CDM?\AA“ç7# \CDR\8EgÊçøb(\C7Z=== ./.git/objects/24/b3e1d9b04398d5171b1d69ee394d2d790dc55e ===
x\9D\8EKN\C3@DY\FB\BD\E7\A3\F9y<\96\E2*=\BF\81q\E4\89%8\9B \B1\E1 \80\84\89\E2\\A1\E7F\AFÿ≥\AAz’≠R\B9\B6i\E6=H\A1N\FA.\D0\C1\AF\B5\8E\8A[WW\A6\AC\84\B0\C2)cmQ\F9(C≈ù\8D\C5\BBp\DF\F3\85r\B5(\A4s\AA4\DC\D7\\F2»¢\D2\A5’•\AE\85\B6>\F47m\B3\D6\E3\F2v\81K<o\F0.\FF\F8z\D6\E0\FC\EE¬µ\CD\F0\AA\D4Rc\9C2\C1X\91\D3<\B3\FF.(\E8\9DF\FA\A4\FA\A2}\D3\B2\8C\B4\CD\C1.\BD\D2>\AD\E92\8E\D9\D3=
g\D3\CB&\BDLD?ŸΩm =\A7!=\A5m\B3\AE\B2[r\CBaj+\8E_«çe=== ./.git/objects/0d/0a24c93ea23cc4581d9131f0f46fa3b656926b ===
xu\93K\B3\A2HFgÕØ\A8=\D1cA\F1("\BA'\BAx
‹´ \88^wU\BCE\FC\F5\E3L/f”ì\BB<_\E6"\F3\A4\DD\E5R\8F@\80\FD1y$\882\A6B)\A5E\96i\89\B9\98b-U—ú\E5\83\B4@\9D∆™@\D9e\F4~\BE\D1;\FDv\A13\F8\FE_\FF\B3\BC–∫\FD3\ED.A\95\84dC\C0CB\EEM\DF{\C7|\00N=\AE'\BE_\BB!\BF\B5\CBœ≤\AB\89\FDO\AC\BC\95\F7\BA\DF\FE)\DDr\DC
\9C\00D\AE\B3!\F1~g\FD\CB9\C0\81\E7\DDNuBt\83\90P\BDn\90Pj\EC\81\86\EA4\C9\FB\AA%\84\D8	\89\FE\88j9k\BA\85-\F4\91.+~af\F3t_\90\A1\B7[\AB\F57\AC\84Q\AA\ADZ\88\B16\8F]\C64\A1-dI;(\DDG\B1\8Fƒì\D3\855\CC\FD\87\DE\DE\F9\94\B6€º\|\A4~YNz\F0\C9f^?go\CE7\9F\AD\84\99;W\D9\DD\T\D7'\D0r\CA\EF\FC&\8F#\95+C\AE\ED5:i%)\\B6JXJnq\B3\B1^\94\BC\CBN\EBB=0\A3=n\9Bh\F4aq[\E3&>\9E\B6\AB\93P\D41}O\884M\84\EB\CE	\E9\E0.h-v\F3\8A\A8\EFS \E8\9B\C1#\9F\BC\EE\98e\8A4>K\C8Fo.\88\EBZ\AF\C6\C6x\CC\98uD;|\A8\988\97À©\F3lr\8Bs1~m"=5}+\EF\FA\F1\D6\F3Xmrw\E7=	\90\EDT\EF\cﬁ∏s\C0\9A\9F\8D\84b\86h\B2\F8\AEo\9E\C7(\8C\EC(\B0\AF(\87J\8D\A0\E8\B29\EE\AB3\AC\8Fz\94\8D
U=\B5\C0X;IO\99\9A\C8)\C3√Ñ\A2\00'\87`\A9?\F0\C0\93\85\8Fjo\AE\B7\BA4\8BŒ°\F2\CC\91\D9\E3\D6\CCU\B3\BF\AArL\B4“Ö\83\BFN{\C5o’§	\CEB\AFX\B3\B4t\EA\B2\AC\EC\\92d\BB\E1\AE\CD-HD\EDb\E6PE\F9\DD\E83\DCH\E05&=\FA'%\EF\DAU’É\F7o\85\A5\F9#\B8J\BD/\CEb\E3}\851\B3!>G\FC\E9l\BET!\B8I \BB_\93\FD\C8\A3\FF\B4\B4\CD\94\97\81z\C0\C7/\F2\99\92œì:\BD\FAri\8B\967d\89Ujt\89^\C6i2\90\81Lb\F3\FE\87Í´∏L\F9\ACuk+X\EE\F3|\EE\DE\F4G\9F\90
\F7\CB	kc\FE\DEŒΩ\D6cM[\F0K\BC\BF\F1:\C5=== ./.git/objects/0d/778f32131fe2a9fd5199fbd9b86bd098db9f69 ===
x+)JMU042g040031Q000\8C\CF\CC+)\CA\D7\CBMa\98∆õu\92\E9\EA\D1\FB\EB6\CE{g\B6O\C1wG\D2bq\B8:\A3\F8\E4\8Cƒí\F8\8C\CC\E2\92\FC\A2J\90r\CE\D0\D4/?\B7$\BF\B5\89SJ>\BE\BAo\85\AE[2\\B9q|QiNj1H\DD\F6=qN\D2\E9\FD\B3\AA:\AD\A8^\E6\9F\00\D53Z=== ./.git/objects/40/8ba1db704cafdd9a32e2c89c7613aebedb0af3 ===
x+)JMU044`040031Q\D0K\CF,\C9L\CF\CB/Je8◊©\A9\F4}\C3\91\C6\DAS};\A3\AC]|\B9/\D5@U\F9x:\BB\FA\BB2\FC\D8p\EE\E9\D1Q\B7\DE\FF\99\F3\F9\96mi\C6\CA'\94\A1J\82\]|]\F5rS\CE8\BC\B0\9D!\AE<eJ\DB)W\EFSyuÎîÇ\00\970D=== ./.git/objects/ce/892922f7b0c014817dca8eb95a3b444d0bd27c ===
x\95Yms\DB6\BE\CF\FC»∏s\B5’àJm\D7iznd%N|g;>\CBI:\E3\D3h@\92\91\87\00\F5\D2\FD\ED\F7\EC\94%\D9\ED\A536E\E2e\B9X\EC>\FB,\98\E4&\AFO^\BF\FA\DB\C1\81\B8\9C\96\A6V‚≥∂\8D\CC\C5\D05\996¬©\A22\B5\AC\D7b\A2se_\8A\A4\D1y&je\9B\DC\E1Q\96Y\84\B9\DC)\A6\AAT\B5t*\C9ZT\A6jrY\EF…ìY\D65\A5\8D1\89\E6\BDWN\E4\98a\9D\98‘¶3\E7*\FBK\AF7\D5n\D6$qj\8ApK?\9A\EC%P\BAWH]\F6\BC\AA^\D3x3 \8A\C4'\ABÍÆ≠T\AA':\F5\DAE\9D\B8\B6
\DAqc\83kx\A0cm*”ô\A2\BE\BC\8C3\93ZGj\E1Y\95\8B?\90(\AFMiﬁ™\85\CAM\D5\FBU\B2\D6e0\DCQ\90_\D5jbi>
\B2qf\CBJl\B5\A8@\CF8\AD\A5\9D\C5y\BEm\E1\E8\E1m6RI3\EDm\EEn\9B$\D7)\9E\EF\EA\91 ï\B4j\FB\DE\F6\A2\D5\D9).?\9F\A1\F9\CBr\F4p\A9G7\E5\E8\E4\CF}9\A2i\D7\C5h\F7\89\A6l\F7\9E\9D>\BCS\A3\87A\8AqI\9E\A1\F3\A3%_\FDo\E3\F0{\95\8Fi≈øx\EB\BE\E6¬î\E2\FBs]~/2]\AB‘ôZ\93=;\BD\87\F3d\84\CD\EB\D06\95\D8\E1B\95N\E8\89X\9BF\CC\E4B	'\ED\DC
7\93~\96\AFI\F6NM\E0t\B3\E0i0ca04\D1%\8C\B9\E2\F0[|.\99\F7N^\9F\9CE/\B6ti\C5\D3*v\E0\F8’è?\F5py-\D8Az\A6r\BCY\D4:\8AX\FD7\AC%\AD\
\EBR\A2\AA\CDW\98\E4{+\C8\CDZ\F0\9E\E5rY„¢Ép\C3v}\A2\D1\EB\E7=\E9}\FF\AD<\F9zxO\E1\C51v\E7\C36z\B8w#4\B2Q w\B0\8F\D8r<\BF\9F\F0\C4N\EC\EA\D9\E3\E6S\A9\DBh\C3"\E2U\91G$\D6\E4«≤\C1\B0n\87\EF1\AB_a\91\00	
\B30#Q\A5J/T\86\F7`\AC\F7\F8\A0\9C0\A0\8A\E8\DF_\89[o\A6G\CFBœç\D7\DF\E2)\CB\F3L:\A7,F\95\E9A8\ED:\CF€ñ\B7\C6\DD(\F7k\A7'2u\DE2\F1Õª{1\00\E6Ea?\E2‹§\F3\F8\AB5\E5\A6eR\CB)9\E8V\97\DC\D2ﬁ≤\9Ca*'\93g\BA\9CF[\F7wJf\D7*v+G\DD:WSE\EDÕù\BA\BA\D6f\BCi\8C\B0\8Etg€£\CEXc\99\9Dq\C5\D7Y<√ñ\E8|\8Ek\A1\9CƒèI\BERS\96\D0\D5?T)\8D\AA|\93\FF\A9\A6W\D3\D7\DAVP*i\9C(\8DoC\98\AEc\DE\EA\BE[\A1\9DHM9\D1”¶V[~\DF\CD	\F8B>\C8\D4DRB\88^<#o\B2	\C1\AE\CBI7\97k\BE\92j\AE\A8\FCuL[\80\D5-\AB	\DA\E2\D4\FAg\98} É\F9ga+\9B\92\FA\BCN\A3\98\93\81t\E5\97m\A9\9F@\BDX\DA`÷∏\DF*9c'\CE7n\D9\F5\82\8D?\FC\E0\E3;“∞\reE\D2Àî\F46\95*Ÿítc\B3	\9A\FC\95\81\81\B0-\9F1\8F\C1/\FE\C2h\B2\B3\97\FF4\9ElRYe\E9X\9B\BF\AE\F0ceE\EA\EFN\BA\AFe\AA|`c\88:V4\E4\FEb(\80N\C7\E2 §\B6/\A6\9E\DB
\E3\A2\EF‹Ñ\C3\FF}\A33Ybb\B9\A7\00\D8\00M\EF\8D\C9\E7\D3\D3jHy\8E$›©\E1L÷ï\AA\85\B6B
v\EA‘ê?J⁄∫\8C∆õ!\C0\8BNÃë\F80\B4#?
-\88\B2\A1rS\ACO\AE\A4\A0\92\C5@\BB\B5\97\CA\B6\91\D7\F6\F1N`\F2\00\90^?0\99Bl\E2YN+\F9YB\EA\F6W\E6œá\C72\8C@\A6y\F1\F8`[9\CC!\88\A5\E4\E0!\BCl$\F5R\A4DDf21u\81!O\94I\83j\8F\8F\84\8C\8FO\BA\9C\98\A7;	\B3*\C4TX\A2\8AC\A7\BA„õ∞\D4\F6\96\C4A…õA\DD\00‹¢q\B8w\A2xÎ∂ìrw\87PJ\E6\8E\FD\8C{\F07\86\88k=\9D\B9\F5\B51\96\FC\B4(\00\BD\E4\CF1\B0\91\9D\E5\8BJ\C4.\94n\8AC+\AD=\8A\E0\8D\D6v}\F6#A\97%\92V\9E€ôV`\82\A6q\00\84\A0\FEL\A4a\CEc=¬æ5\E9\AD\C7po]\F0\AA\86\D0‘ªa\A0\8B\A6n\E2qx\8Fe\A6\F2\AAm\B5~\A0\86N\FCau\FFl\EB\E0\99\D6\D9,}\B6u\FElk\F5\A4\F5\83+\F2\E3'\AD3\B4\92-`b\F3\EEG\8A\AF\96Â¨£\8A\9A~`\00\935\D0\B2\ECG6\8C\FFp[\8D\FC\DE*\C0\CCo\C0V\A5\DD\C6f\A7~\81\D3yfD|\A1T+\F0d]\AA\96'-%8H(k:m\00w\AA\C5\EF\C8T\95\9B\B5h\BD\FC%\C4\BES\92L\C0	\C9K0B\EB@W\A7V.A\B6A\D76FC*l7\9C \B3Gb\A9s \BCM	\87\A8\D7\A8=\D4\C7\FAHQ\BE\A1\852T\E3E◊ö\E2\C6L\9C\E8\D3zxÕ†"\D8c\A3T\FCMk\83\C0\9D\D5\FD\B9L*L\DEPZ\D4	 \86xu\80;\ACŸ°\\80\EED\B1`P¬¶\B5\AE@L\9E[bÿ¥\A1\C2\FBx\D3P\A9r+\D39\F0\88sBSÕß\E8;\86\EB"1\F9v\BF-√Ä{\E2{a^\A4\9A\92\CC\EATK*\95\A8B\88\F9\847\83cF\A4\82/\C3[\C2|&\CDj\95\AA
\81\D8Z\EF\A5X\CE4b\E0	\E5k»æ\9Es\E1d=Ìâò\EAn\89\F1s\A1\FD\87c p\A9÷õ\99%\92{J\95$\A0\B5T\AD\EB\BC\E5L\95\F0N\95\91q\F7\DFR\83\DC`;\98\F8–àBl\B68\F9%«Å32\84b\8F\A6\AC\81\A0\F7\F0 6\90Lr\B5!\8EeC\C2(\9F\98\F9…Ø\D2WY{.\E8\CD/\B5+\CA[\BCx0p\8F\8B\BB^\FB\AE@\D9
\A5#\95"\83\D6t\81\D6_t\99\99\A5\83#\BD$y\B5ﬂìM‹£
\A1j8h
\BFo\9D\A5\9D7e\96\AB-\F2\BAb\96÷∑÷§\9A!\91\E1`\C7"\F7e\D2H\A4"J@?	\CB	
]f\A4\DB.M`\A0Z\B4\859\88\E5q8\EC\BBw\A9\D2\E3\D8\E3\C5\\A9J8\8E99em\B4\C4}Q—ã>\CEfS}D\80\D564PP\00\F6\A2ﬂøC9\F1;ﬁí%EF\C0\91%\B4\F5\B1E\80r\A1\D5m_'\AE’Ñ\A3E\B1\C8‘®sqj@\89ŒáÕ£u_\96i\8EC
,Pf\F0S\CA"x
G\E5!\A8\002cU\DA\D4DBjm\E7\98\F9\ED\B5\E2\F1\E9\CF'\DA\DAFu\8Fzs\FA\E6\D5\E9\F1)jGP\B4rN:5a?\AD^\818\8F\D3\96\D2\E8$\87Àºz\B6U\EE#\8E\BB}\F4\8B\B1V\8F1\A22@YPËø¢ﬁè?\BF\F1\EA\85Wt|uz\F2\FA\F8\EC\F8Z\EE\8B\E6\ED\B9\BB\EC\F7\86:Gx\E7\C4\DA \B4—¶z\DF\E1\B1\E7p\80\A6G\F9FuJ\88Q>\A9A<Cq=d\FFV\C2"\B0B	h\C0\E2\F6\D3,\F2O,\82tb\C2\8F\AA&\9C\B7*.\95?\C0\8F\F8G\F7(\AA\A6\B5Ãî\AF\9D\C6\4!\C6XU\D3\D0{e\A6\9D\F8\D7Î´ùg\A4\EDh\A8\EA\85N’ÖLj\9D\FAY\84
u\E5\D8'\E9\F7\F5?W\82FB{\D6#
\A6\FC9_K\\B1\C6\F3\C6"\AF\80*^\96N\E5\B0'\D2‰¶∫\A7,QgyL\B9\B7\89.\E2\"QS-\8D\871|(pQ^\DFQu\E4\BC&u\B6\C4\E1√´\EE\9B\D1\D1ul\F5B\C7«¨|!\E7H]|\E6\A8,%\9C\BC\9F\EB\C0\B3@y`O\9B\A9\FDVv‚∂ª\ADSo\E0\00m\A6\E59mo\87\A3\B8t;\96\A5\CC\D7V[2@Tb ∏\00\B6\B7\C7\BB\A0u\EAH_\BDU\F9\F4)\AE\9DqHqq#\DAC\DA\8Fœç\A7”∂\EEV\AEjk#^\968\B4\00\803\A8wC\B8+\F20
<\A1\\D3)\DE"Y~\83p\F2\A4\B2\BF*\FA\992o{\9D\94Ov%\ACP\CCm\B7Zbu\C4p\A8\C3/\83\E0\85—ë\98P;\98V\93Y\C2\DA\C5&\c\9CJg\A5\A6:\B2\F5y_\F9R\FCd\F8\A1\C7\DC\EC\83Sj(\88\B2\80\A2\DF__\F9\D0\DB\E0\CA&\FA!o\95\9D;S\FD\A5Q\D7p\A3\FCZ\96zBe\B3Pz\9B\8F\D4?|S\E8~:y|\BBp\E3w+0_B$^\E4-\82|YQ\B1\8Fh^\8B~<\A5R\BD”ã+\EA\EC\F15V+\9C\D1s\97\8D\C5xy\D1\FF\F7;\D1\88:\F4\F0\94	n\B8\8F@\F5\AEA)\80'L0\F2c\F8CtZ\F7\DA\B2\F5\ED\DA\CDB\A5\FEL\84\89\C3\DB\FB\CFC\ECg\A77Wk\CE\E9\E31\C1h\FA\00o\85";\F4\8E\CEW	e	\B3\C0p\C6\E8p`{\9D\A8\9B\BF
\9C\86-\B35H\BA\97	\B1\FA\00\F1g‘às\E7Z\CFA\E1\FE\D5Xw\8DS\B3\CD\91/\ED\C8$\FE\B5xt\AE\BB\97\F9|\CFW\E2\C4\D1i\C6&\AE\F07&[\F9\9B\95\CDB\A6\FF\88\DDPq,>]"\DDx\i?BD\9B^\B6\B3\AF\86\A7\AD\85\E8\D3X\B0Z\C1\95\B1@\99‹∫i\D8\E73\93\BBkj93Q`
=iR\87R&\C3\F1
\9DC·∏ô*\A3\D1◊π\FD/C1\EC_\87\83L\9AJu\B7\FFn\B2\F1\FA\B6F\8E\E5\D2v\AD,\E8\A57\9Fu\A6\A5\B8\B1\9C\8A\DF\DF~\82\E7\E1\B0\FE\F6\BCA\CB}\AD`u/\C0\CE@FQ\BF\B5_\80	\E0\CE(\88\E9–Ü\A2\80p\CAs\F2\E1G\9A4\91\EDO\8D>h*6\F0\89\E7	\92\D3\B6\DC\CC\E1I\BB\B0\D1N>\FC<\B7G>p\A6\B5=\ED\C7ﬂ∑M\8E:g\A6d\EEf\\DD\F1\A6Mym\F5X\9C\A3\C1B-I\E0\F3\D60\90g\94H\805%‹Å\E7"\BCf¬ª]\E9\F0>\C2\E9\BEL!\C8€å—ó\A6\D48\889\DC;\EDA\F4~\FA3\8E\8Ag\ADI\98\CB\E6\B80\D9\B1\B6\97m@=Pc\BF\8Dh\C0\85/\B5\8D\E1”¥\AA\F6\AD\C9\EEwX\A6\DD/\84\FE\86I\B2\F4\95\81\D8/f\85\DB?\FC‘ãv>\D9k\CB%\ED5\E2P!\00\DF^?e\AAkK]U
\8C
\FFGasE\F1\CEv\A3u{[A(\B6\F0\96\8E=5dh\EB\ABp\B8\D4\D2.\FFUp;\BDT\A4\92\CEcK\E7»∏R\C5PX\AA
\E4\B5\FF<w\C0z=== ./.git/objects/ce/40a9baf411731c60b1cb1e4d099fc7834a32fe ===
x+)JMU044`040031Q\D0K\CF,\C9L\CF\CB/Je8◊©\A9\F4}\C3\91\C6\DAS};\A3\AC]|\B9/\D5@U\F9x:\BB\FA\BB2\FC\D8p\EE\E9\D1Q\B7\DE\FF\99\F3\F9\96mi\C6\CA'\94\A1J\82\]|]\F5rST\FA\A3Jm\FE\97u\B6\A1]\BBm*;kA\B3\00\96d/=== ./.git/objects/f8/b0cee5c5985adaeffc9cf3da3d7568a9f0c823 ===
x]R_o\9B0ﬂ≥?\C5)O\ADƒ∫\B6\D24io8\8D5\C88\CD\F2h\C0oG\D8,\EB\B7ﬂô$\9D6		\F9|\F7\FBw\AEz[\C1\D3„óß.!5\B5\9C&$\B6\A7\B7\D1:w\F5=<?>\86\83m\94\FByRN}<\AAﬂÑz<\E7\8C\C08\E8\F4\A8\AB78\8Cj∫â†\B5\DBB›©\F1\A0#\F0\D4\F0'=:\B0\95Wf0\C3\D4HE\B0\D3w\E3l\EB\CFj\D4\D8‹Är\CE\D6F!4\B6\9E\8Ez\F0\CA\BE\D6\F4\DA\C1\9D\EF4,\CA\EB\C4\E2~&i\B4\EA\89M\C3\ED
\CE\C6wv\F20j\E7GS\8C\CCP\F7S4‹Æ{s4W\860>\FBw\95O\9Dmc\DA\F0◊≥\AD\D3T\F5\C6u4&@W\93\C7N\8As\90Q\F0\F1…é\E0t\DFD0\A8{\F6\FAW\DD\DC\F2\C1l\90\FF\91\95sg\8F\FF:1\8E\B4\D38 %\86\82\8D\C5\C8f\C6\BA\F6\A1\94\B7\B6\EF\ED9X\AB\ED–ò\E0\D7}%D‚ï™\EC/={\B9\ACw\B0\A5\CEq\CF\98E\\B6z\BDr\9D\EA{\A8\F450\E4\C5x\B1\F4n\DDM\95\F3\B8x\A3z8\D9q\E6\FB\DF\E6\F2\AF\94\F9J\EE\A8`\C0K(D\FE\CA\96\C0\82\96x^D\B0\E3r\9Do%`\87\A0\99\DCC\BE\9A\ED\E1œí\D8\F7B\B0\B2\84\\BE)RŒ∞∆≥8\DD&<{\81%\CEe9\BEa\8E/Ae\81\F0
\C5Œ≠`\C3D\BCFd\BA\E4)\97\FB\88\AC\B8\CC\E6*@\A1\A0B\F2x\9BR\C5Vy…ê>Aÿåg+\81,l\C32\F9\80\ACX\F6\8A(\D74M\A1[T/\82>\88\F3b/\F8\CBZ\C2:O\86\C5%Cet\99\B2\9A\8AS\CA7$tC_\82:9\A2\DA.\EA`\B7f\A1\F8(~\B1\E4yl\C4y&#t)\E4\FBËéó,*xY\89|\91'N :\82\E0\\C6.(!\EA9\A0\F7\8D`Kl\8B\A6oZ a4E,\O6[\BC5?\90?VW\FE=== ./.git/objects/cc/40e83d981723949486ca454bca6e7eae2253e1 ===
x5\8C1\C20\A9Ûäìê\A8	
\A8h\90(\D2\F1\DB\Ãâ\B3\CFr.\C9G\E8\A9\F8O\C0F\A2\DC›ô\B5,v\FB\EDj
\A7\CBY\B2\C7\E6\F3z\BE\FF\E1\00\D7;\C2\C4J\C1(\96n8#K
…è1\87\D0A_\A1\CE1’Å\A2\A2\CFFIb\B3P!\9CD\CD\C2-\C80\D4l&\95\F2Yÿò\90\8E?\87\99|\F5m\96e\A4\E8\9B/\909x=== ./.git/objects/bc/524e67c188dffe4fb740947173c8353b9d72b5 ===
x+)JMU044`040031Q\D0K\CF,\C9L\CF\CB/Je8◊©\A9\F4}\C3\91\C6\DAS};\A3\AC]|\B9/\D5@U\F9x:\BB\FA\BB2\FC\D8p\EE\E9\D1Q\B7\DE\FF\99\F3\F9\96mi\C6\CA'\94\A1J\82\]|]\F5rS\92"K\EE\9D\D9:\E3\CFK\AFo\9C\9E÷Ø)\C8\00\00\A6\A21\E2=== ./.git/objects/ab/b3075f5e6cfb5b5a6624324a654314c4b9523d ===
x\95\8E;JAE\8Dk\CFX\94\FAM\97\F1\EA\D7ZSCO	\E6\82\B9\91\89\91y'\A2\89\B8\85Íù∏;\8C\CD\EE9\C1\E1\86Z ∫\D7Ó†ç)\81\8AÀ§M`\D6∆ú\93\CC\DEH\EA\A4aF+\94\F0.\EE\D9\E2\986
h\A4\C8ep"!!HeYtL\B0L\B3\D4\85\D7J;\AE=\C1\BBv]Gj\C4\DD\CDwx\\F0N\FF\F8|(\B8\BE=	\B5\9C3J!\B8\D3pD9\A5d\B1\CBÕñ\FE\B0\\CB\DF\00\F9~yz\85\8B\AB\CB:i\FDy\DE\F7\F7\FE\D9?\E6\87>\C12\A7\FE5\EF\E7\C7\FE\B6\C8\E9\90\FC\00\9A\b\AE=== ./.git/objects/63/6f5c58e7ef9639dd0f9c1f55d795306b47d1ce ===
x\95Y\DDr\DB\C6\EE5\9Eb=\CA4c\826-\DBq\FA7-\D9j%Yi;\95\C3Y\00KrM\00\8B\C1.H1\996\FD\99t&}\80\BEB⁄ôL\DBt\92\BE\82\F4&}\84~gwA\91\94\9C:\F6gœû\F3\9D\EFD\A9\8A\D8\E3'\ED\C7?\FA\A9\FBc\CF\F7;O\83\AD-v8\CEU)\D8+\A9+\9E\B2\9E\A9\A9\98Y\A1J^.\D8H\A6B\DFeQ%”Ñ\95BW\A9\C1#\CF\9Ak;\D9X\E4\A2\E4F$,Z\B0BU\CAÀç\F5x\924U\AECL\A2yœÑa)fh\C3F\A5\CA\D8ƒòB\D4j\8D\A5\99TQ\AB\CC\DF“è\B4\B6"Ï†ïq\99\B7\9C\A8N\D2p9 \B6\D8K- ¶.D,G2v\D2\8D\B0\D4\DAq\A3+\85\AB\A0\A5u\CC„â†\BE4kCb\E1Y‰≥∑\AC»∂\8FU\AE\9E\8A\99HU\D1\FA\98g\BC\94\B9W‹é_\BF(\C5H\D3|\CAxe‘ä\96\AC÷Ç=√∏\E4z6h\E4ﬁ™\86\83\F3\A7\C9@D’∏\B5\BC;\AD\A2T\C6x>+"\\8B\D5{\DD
.\ED\E2\F2\E1#4\BF\9E\CE\E5\E0\FC$<h\E3\B9\C34\ED\FC8\AC?—î\D5\DEG\BB\E7\FBbpﬁç1.Jt\BEP\83\E8\8D\FB\AD~\8F“Å"\A9\EC/ﬁ∫)9S9{O\E6\EF\B3D\96"6\AA\94\A4\CFF\EB|/\E0\F0tL9N8\B9ar\C4\AAb>\CCp=\D5\CCL\B8\81\9D\A5Zg'F0\BA\89\B74\A81S\C9J«∫[l\FB]l&\99\B6<~\F0h'ÿ∫\B3"K\BD<\EDb\DD\DA\F7\EE?l\E1\F2\98Yi\A9\C2H\F0rS\8B \9Ca\F7Ô∞ó\B80)\ECK\B0\A2To\A0\92\F75#3\AB-\94\C1z\E6\F3y\A9\94	\B6\FC\8D\D5\EB
\89\DFnI\CFj\FF\FB
; o\B5\93\8F{}r/\EBcg\CEm\83\F3\BE\A0\D1Z9r\E7\88S!\C3s\E7	Kl\84\A6\BC }\9C\BCÃ•\C1c\EDm\D8Dx\91\A5-\EB\B4\8Fy\85aÕÜ\BD«¨N\81M\CE\00$4L{\C0\B8\F6D9	ﬁÉ\B1\CE\E2\BDpL\8D\80*\AC\D3?b\A7NM◊ñﬂÉ\9CK\AB?\C5S\92\A6	7<\8C\ED2"\8F'p\C2)\AB\F7\B9W\B7<U\E6D\98\B0S9\E2\B1q\9A	O\F6\FB\AC\CC\FCy\84\A9\8A\A7\E1\AD\F2eÀ®\E4c2–ï.\BE\B6H\A7wj\D7\E9\C5|4Ri"\F3q\B0r&xr,BsaH¬ûY\A4\A2\AB\8A\A0\BE9@WS\EB\CC\9AEXC\BAv\ECAc(\B1\CD∆∞\B0\D7I8\C1\91\C8t\8Ak&«è\8A\DEPS\D1\D5=1\8D*\\93\FB)\C6X$,\C6	\AE\A5. TT\96+√ûz7]\84\F6<\A8\F8\AE\994,V\F9H\8E\ABR\AC\D8}3%\E0\F3\F1 #N!\B8s\CB*x\93\8EvMJ\B2\99T\DA+\89f\B2\C2]\87t\D8›º\A1-\8C\B5{\86\DA\C7v\B0\FD\99\E9B\C7$\FEL\AF\E3 \B4\C1\88@\BAp\DB÷≥\D8M\A0^l\AD;\A9Ãß\9FX#\F4\C67\AC\AD\E9yw?\F8\C0\F9\B7$\A1\B9\D6\E5\AD\9E\C7$\B7*Dn5I7:\A1\C9]-0\96\A3\E5U7\B4c\F0\8B~
$Y;K\F2O:)\B4\D0\F4\EC\CD]/\F0\A3yA\E2\AFO\EA\97<Œ±1D\B4
\E9\F4–©ÕéTg{\AD ©.0.xœå\AC\FB?\ABd\C2sL\EC \F6d\00\A0i_\A9tj}z\\F4(\CE\D1Jg\A27\E1e!J&5\E3\CCu\AC»ûm\99\C3\E5\E0E#\B4\9Ex\DE\D37
-\F0\B2\9E0S\B4\AE$\A0\E0YW\9A\85[\D5\D8r\BD\BAœû&w\E9\FE\F5]\95\F8&\9E\F9XX\81\B1~‚áê\B8\9D\F5\FD\C3C\EEG \D2‹π~–µ\80\D6Õ±\90]%\B1\DBF\90wYL\84\80`&#UfrC\98ÿã\D6ppq\FDH\C8x\FD$\F3\91\BAy\92P\AB\80O\F9\CD\C1\AB\AC\EB4@w\\B6Z\DF\D2r\F2\A4[V\00\B7`\E8o\86\8D \\B9mƒ∂\BBA(\C5S\C7nF\FC
\83\B1ƒ±O\CC\E2X)Mv\9Ae\80^2	\82\E7\D8h\8DÂµà\D8&n\B2mÕµ\DE	`\8DZ7]\F4\A3\85s\AD4\D5)\C0Ue
\00A\EC\99H\C38\8Fv\FBT≈ß√ùv\C1\AB*BSg\86\9E.\AA\B26\88\EB\E1-k(\91\AD`\A5\F5954\C2\E7\FD[[\BB\B7\B4N&\F1\AD\AD\D3[[\8B\AD\CFM\96\B6o\B4N\D0J\BAËÇâM\9B/»øj\96\B3
"h\F8\81\96\AC\81\B6\90f_XUA\F9\E7\A7\C5\C0\8D\B1G\98\F9ÿä\A1t\DA8le\C4G0:«å\88/\E4\E2<Y\E6\A2\E6Is\CE\CAOA\C0\9DJ6\C7;Q\A4j\C1j+\BF\8B\E5\DF)HF`\8A\84\E49\98\A1\806\A0\ABcÕ∂\E7 €†\EB#\81!\8EF\90\E86\97)^\B0*\87A\94\8B\D4\E2c$\A8\BD\A1\8DZ\A8∆ã\8E%\F9\8D÷°\FD\D8=\830\AF\8F\A5P\E1;\ED
\AE\ED\EE\FB◊§\C4\C4\E0
\B9F\9E\00bH\8EWz\B8√û
\D2»æE
\85"t\\CA\C4\E4\B6-\FAC\EB\B9!\F6O*JUNy<ŸòP\D31t\BDE\A9t\B5_\E7~@\9F\F8\9E\9F\E7\DD\A1&'\B5\BA\84Ÿí\889\B2b>\FE
\C4`\C0\98\E1\A9\E0À∞?ﬂífq\8B\81\D8Z\EB.\9BO$|\E0\85\8A\D7X\FB\B8\B7g\93\C3\CB1hO`\A9\EE\CA2n.\A4_#\E008.\E5z5Gp/}\AA\92\82\83\83‘ö*\C5u\9E7\9F\88\D6)R\EE\E6[J\90\87%\FE\004\A2K\85\CD\80\FC\92\E1\C0-\84zb\8F\A6\A4\82\A0\F7\B0 \AB \A5bI\F3\8A6\84Q.0\DB'\B7K\97em\98\A0S\83w\BCX_P‹≤\9B\C3\00gq\B8\B8n\B5\FB\D2V\88\B4\A4\A4~-\F3D\CD5\C9\C5…™›ô,\FDYe\C3^R\D8}m,\AD`\AF ìT\AC\90O\DF\DA\D5:Z\ABXZH\B4p0\84a\91\F9Z\D2H\A4 J@?\91]\C7?Tpt\9E\90l\EB4\C1\B5\97\A2N\CCA\(\8E\C3\F8C◊Ωn\80X\912=\9B\00;\BC\98
Q0\C21%\A3\AC\A1\8D\B6\B8\B9Tp\E7◊≥\AD\AA^\C0\C1J\00(H\00[\C1g\EF!\9D\F8oI\A2,!\E0H":\FAP\C3\C13>\93b\8E\B67\A3\D7bD\9B\F5\88Q\A3X\A0J‰π®P\E0\84\F1\E1\F0hﬂáy\9C\A2H\81\8D\CA~r\9EyK\B1Fq"\80\CChW%\91\90R\EA)f\BE{\AE\D8\DE\FD\F0\C1\96‘∫\CD\F6\C3'\BBO\EE\ED\B6w\91;\82\A2\E5S\92\A1'	\FBi«∞
\FC\87\F1Y\C0`)\8C\8ER\98\CC]\A0g\9D\E5^\E38\B0\DBy?\8B\E0k\E5#
\94\85\FE!\E2\DD\D8~\E2\C4\F3\AFhﬁø\B7\FB\E0q\FBQ\BB
)7\97\B6\C7sv\D8i\F5d
\F7N\89\D4N\A8\83e\F68$\BEc\C7\EE\C1\00\AA\82\FD\E9\E5)\DEGm\A5\FE\8C%\88\EB\E0 \FA\D7\D9A\D8v\C8
\D8‹Ü\81b\9AF\FC	\99_\9D\980\ £,ƒÅ\89\8D[\E7¬ïP\E0a?i\EE√ó≈∏\E4\89p\B9\D3\D0&M\F01+*\88\A9\EF=R\E3F\F8\F1\F1\D1\DA3\C2v\D0\E5L\C6\E2\80G\A5\8C\DD,B\85\B20\D6&#\EE\CE\F5\D7G\8CFBz+Fd\96\F2\A7\F6\9A\E3\8A=\EEUqT\F107"\85>&\97\D9=E\892IC\8A\BD\B8\8Dd\A6\81\9Ari<aC\9E\8B\D2@\FF\FA\BAD\D5d\94\90\DB=\D1"Ac\A5\81m\9F\DFk>Ïº≠c\A52^G\E5>E\E8\B2W`\8E\C8\C0R|\8D\E0\D9Di\9E\CA[{\EAHÌé≤\D6\DDu\9Ez\FB\00h[Z\AE\D36N8s3\D3C\9E\F3t\A1\A5&9\A63`{]\96X\ADG>\8Ft\D9[\91\8Eo\E2\DA#\EBR6\B9au\86\8E\CA\C3\E3m\E3\A9\DA\D6\\89Uund\B7≈∂=-\00\B0‘ô!\CCq	&\A9\8A7\8B\E6\EF\B08\D9B\D9]\FA\964ou\9FO\D6W&X!\9F[m\D5\C4\EA\88\E1P\87\DB\C1\8BEGbB\F5`\DAM\A2	k$\9B0\8D\CD30"\9E\E4\92\F2\C8\DA\E6]\E6KY\F0\8D\E1G\84=pG\B0R}*@\94\BD|\E4"@k\89+\CB\00\E8\86<zjT\F1\83F√å\D2c\9E\CB\A5-\96\85\D2€ú\A7\BE\F5M\BE\FB\E6\E4\E1\E9\CC\F7/\C0|	\91\EC&O\E1$\E0ÀÇ\92}x\F3\82e\B0\E31\A5\EA\8DVXPg\CB^Cq\81\BA=7\AD\B2,^t~\B5œö\EC\00^\87;e\84\DBG\A0zV!@\8A\8D
\94|\ED\FEX:.[u\E9\FAta&>S\BF\C5\C3\D8\F6i\FFU\E7\D9h
\87\C5\C2\C6\F4\E1\90`4\BD\8B\B7B\905zG\F5UBY\C2,p\D4
\EA\00\BA\D5h\80\BA\B9[\CFi(\D0Z\B6\86\95\FA<"\D6C\B0\BCA\AD\82Qw.\E5Óóï6«®\9A-KD.\B5#\95`\F8\9B\ECz\A1=\F9i\9F\A7\D3
[	#C\D5\8C\8DL\E6nTr\E1n.t\E2#\FD\9CF\97\92c\F6\F2\E1\C6\E1J\FD"X\F6Z=\BB<\A1gPm\CDX\87∆¢\C0\AA\99Õå\D2\E4\DAL;\BD\8E\AD\99\9CU`(\D8SÕô\C1X\88\93\EBa\91*6He\94W\A8\85r3!\94:D\A3\CBs;\AF{\AC\D79\F6\85L\9AJy\B7\FBn\B2\B4\FA:G\F9\75\CF\E8\A5'\AFd"9;\D16?;}	\CBC\B1\F6v\BBB\F3}\AD\B0\E2\80\9D\81\8C"\AB\BF<\00\C0\9D\91\FE”°E\E7\E1¬ß\E7d\C3J\9A4\D1n\DAU\8D\9EKJ6\F0\89\E7\92\D3\AB\B9\89b'\AD\C3F=y\FBU\CF\DF\EEx\F8@Mku\DA\CAﬂßU\8A<g"xj&6\BB\B3\98\96\E9i\B0“£QG\83\86j\92`\EBVBO\9E\91"\8D\00\D6p\BB\8E\8B\D8=ﬁ≠H\C5\FB\00\D5|\99\82\93\D7K\AA\\A2\B3\BDQ\ED\81\F7\BEÍπö\8F\F5\8A[\B5\88\950◊™\E3@%\F8\DAF\B4\F5@\8EI\FC6\A0\AF\BEl\94:\84M”Æ\EA8\B4&\BD\C3›°\99\FA\BC\E0\FAK&i\85\A0\AF\C4~m1\CB\DF\D6\F8\E1JPw\EA\F6\F3\C9F[ ©|\B4—à\A2\82\BE\8D*?%\A2\A9sY\8C\FFC\B1\EA
¬µ\E3Fj6\8E\820\90\AD\E0-\95=\A5\FD\C8P\E7W\BE\B8T\D3.\F7Up5\BCTƒúÍ±ô\A6:2\AE\941d\9A\B2\87q\EDg\EE/8>\EC\B3#\BDj\DDF\953Ox\99\EC\CA\EF\8B“∫\DBv\BC\83\DAi\FB!\AB\9F\9CP\F7\E0ÕåC\9CSQf\E0\FC8c ´\89€£\FB\C9K\EEB$aS\F5u\CF1\8A\85Dts|Ô¥∞\CETTGb.\F2'\BD0*\8C\CC		Pb\B19\90e\BD&f
"\C3 8\BF\FC\EE\F2oW_\\FD\E1\F2\DBÀØ\AE\BEd\B4\9F\CB_\FE\F3\EA\F7\97_\A3\E9\B8\FBrt\A4 \A0\FA\CDr«≥\FB\E1\BD \E8\F5\CF\BB}\D6y\B6\CF\CE\F6\DD\C3·ãì\8FX\FB\FE\EC\93\FD\CEY\8F\BD89\FA$\E8\93|\A8dY]!\D1$^h\B7\85\EAO\E7p\85B\CD\E9-w\91\9D##\B5\99\C1	~
l\C9}
f\99 DsX\E4\BE\D72\D6\B0\9B\FB\FB\E5\D7W\BF\BB\FA3\B3\BB\FB#\C3~\BE\BA\FA\F6\F4\F9\E5\B7W_\\FE\8B\E1\E6\EB\CBo0\E4sv\F9\9F\AB\DF^~\C7.\BF\81F\BE\B5\ED\B8\D2\C1\CF\DDk\EF>\8Ev>d\DB\FF\FD\EB_\BE`\9D$\A9\B7\E3r\F2\EB\8F\C3;\C1\FF\00R.\9AC=== ./.git/objects/30/16802e11f2d0aa1910593d3c7a999af2c221b2 ===
x+)JMU044`040031Q\D0K\CF,\C9L\CF\CB/JeHŒè\89x\FE~\9A\E5]\FE9\F2\A1◊ßd\BB_<U\E5\E3\E9\EC\EA\EC\CA\F0c√π\A7GgD\DDz\FFg\CE\E7[\B6\A5+?\9CP\86*	rut\F1u\D5\CBMaH\8A0,\B9wf\EB\8C?/\BCV\BCqzZ\BF\A6 \00\C0\B42K=== ./.git/objects/d2/3f326222b62cf5b0ccefe03ad01993fdd54643 ===
x\9D\8E;N\C3@\86\A9}\8A\E9yh\DEuVBW\99]\AFC∆ë\E3H\94\E0H4A\A2\E1 \80\84\89\E2\a\F6FW\F4T\FFcF\9F\FE\D0\D4\F5\BC\ADÚ≥Æç\B4\90v"T\94\B2R\A5@\94N
\E3t\A9C\81\CE9\ACTPJz\95-\B0\8D\A0\F7Z\A62—Ü\CAo\D0Z\953\AD…µ\CCC\EE\9DQ\BA\CCp\D5\DD6-Ãö\97w\\E2e\8D\8Fp\FD\97of5\CE\EF\AFBSOA\C6j=1\85\82s\A1\84»∏\E5\99]\FC7 \A3w\E8\93>\E8\8B\F6\F4M`h\C7\C5>\BD\D2!m\E88l\FB\F1\9E\FA\8B\F1e\9B^\C6D?\ECﬁÄ\B6\90\9ES\9F\9E“öv\ACkv\A0#S\8E#-;.\8C==== ./.git/objects/c3/8873f6725ca3f8f2c59e98660a20ceb803a331 ===
xuTKo\DB8ﬁ≥~\C5\DCv\EBM\DA\B9)\8E\D2\A0⁄Ö\ED»ë"ikZJH â\FF}\BF\A1
–ì-i\9E\DFcZ\E7[\BA\FA\F4ﬂß?\CA\FAﬁá\83\A5\D2’†\AD\C1\9F\C9%Z\FA!\D9!Q\C3\DA\D1\D2\F1\EA\F2CQ,\FDx
|\E8\FD\A5\FF\A6\EB\D7\FF\D2\C1\8C*\AA\8B^=\C5v\B7\A9\97;*?W\B4\A9\E6\87z\BD\BA\A1\EB\AB\E8\B1*7[Z\AF\9A\C7b\D7q\A4\E8\F7\E9IK\F8o\9F\B5\9B"\AD;\D1\DE\9A\A2
\91\9E:Op}E'\AB\F0\C2\EFIaZxglXP\B0\8C\B31s^+7G\EC\A9W\DF}\E0t"\A7\9E\E2eQ|›¨\FF\AFo\EB]uG\DBj\B3\BD).\A8N~\B04
(\F6\BE>7\A8\EE@pb\D1l6\CA\E3p\A0\9E/\B2f\D2*\B1\CBCD\F0$O\EA\C1\F0\91Õ§\96\E1‘ë\F1z\EAQH\CB2:\AB>h\8F–ú\86\C1O\C4\FD\A88\D0\F7\C9$\A52"<\E0]\E0hX\CF\C1O\9D@q“πD&
p\8E\C1w\DC2⁄Ä\B5\F5jW\ADvtWo\97MY\A96ys\E7\E8`\94ÃÇÓØ©\AD7U\F3H\F7 ‹ï
\A9\BA\A8/t\B0<\C30\A2\ED['\AA\A1\E4\F1\88]F\90\86\C5\E4\B0508\C6*\B3\86\C7)\B9\DA\F3\A0\D9\E4\DDQ\E9Uhy\E70\96:H\91R\91\81\A6\A6vJ\C8\EBGg\93\94P!\F1\9E5\A3·ôë\8C\BF ^b\AFd\9F”Ç\80\BB\F5R\93a\F9\C1\EF\80m\B2\991\EB
0\81\BB4\EB\EA\AD*\E7\F0h\FBn\C6sC\DA+\D0E\D8\E3\BC \C20*\B0X\FB\A9\F30\C4\CB\EF\F5\F0;ËÇón\84j\EA\F2\B6n\EA›£P7+A\BCa\80O`\C0
~qy\93\C0/][\F8\88\EE\9A\86\9A\EA3\B8\85K\BF\AEW[C £\FA7\F6.\A3\F9j6\8D&/r\9E\F0Bn\A4\A8\C3\E0A\D0\D5\E0‹Åy’≤\83\EDŒÉ\F6SLt\EA{I\D5<2\C8'|\A1P\89\A4\D6\C2\F2ENo\C1@E1\8F\E3Ó™¨E\D9~\FBz5\B2Ea\B5S‹ÉRp\EE\9F\CFH\CF\97\E4<\8A\8A\EE\CBq\F0\D0d`n\97M\8E\A5FHw	\AC"g)\92\E3,\F0\EC\DD\F9\BA\C85=ÀÖ\FAS\8E\98\B3\82\C8[\F2	s\D7\CBj\B5\AD\E8\CB\FA\AE\86\8DJ\E1\F0f>z\EE\E5\A2
\90-.\CFh\B2U\CA\EB'\EE\EDe6|\89&\E2\CD\F9\A6@jJk;\A6<\D4\D4{#F\98\B5Y\FC\92\D7\BC=== ./.git/objects/6e/ded666f41bc9785722b28833f9ba4df3e71cbf ===
x+)JMU044`040031Q\D0K\CF,\C9L\CF\CB/Je8◊©\A9\F4}\C3\91\C6\DAS};\A3\AC]|\B9/\D5@U\F9x:\BB\FA\BB2\FC\D8p\EE\E9\D1Q\B7\DE\FF\99\F3\F9\96mi\C6\CA'\94\A1J\82\]|]\F5rSw+\8AY\FC\E3\D3\D1y3“∏\CE\ED`^l\00\B0\E11v=== ./.git/objects/b7/bc5e0842781b678f9a7a89f832a87ba9564f61 ===
x\8D\94\CFjSa\C5]\E7)>»¶\85R\A9\8A\88\AE\A2\88\85\BEAA\DC\85>A\FEh\AA\B6$T\C5?(n\DC\DE&\B9ML\9B\DBW\98y\85>\89\BF37i\93\C5\D5M\BE\FB\CD9gŒú\B9;/vw\D2÷≠\DBw\AEU\93}\F7\BAe÷≥\91\9DZ\96l\E4
;\B7\C2N\FD–Ü<{\BC\9Cp\DAM\B5Gv\F7\9E?\ABT\AAT\FD\A4j\94\EC#o\C7‹öP\FA\B4\B6]K\9F‹Øm?Nk\F6Y\B0\DE\E4mF-0\B9◊Åh]’¥\B5\99\EC=\9C\85"\BA\89\D8\EF\EB\B3\80\9DX>!\D2X/\AD\80\E0\F06\CAG\FB\E2\C1,
\A8s\BDG
\FE\96con$;\A7\AE\A0*\F7\8676t\BB\80\92\C4`\F9\FA2kF
wQ
5\EE\00\\F8~\\EB(\F7#\B5WpE\D04\C8
\F9\C5\D1k\8F\CB\EB~@u	“£\CFc\D9c\93N^\9A3k_nE\84?\BF\D4C\A2
\DA\F7C\E0\F2d\FD\C0\C4\F4\90"M\8B\B0\FFB%\8DZ/y\CB\F7√ç\89\F4\BE\84I\A5\E9`\83\AA\B1\CF9m\F9f9\A5\A8\B8\B2\AC\85Ug<\D5=U\A5%\E8\AC\D8'\84\87V\E9-=\80~Óäò\C2\FF\A8z\85\BC\81\ECJ\F8I<\A8&MF\E4hÏ≠ªe>G\FC\83/\DA\EF8R_Q<=\884\E2L_0\B3[_a80+B\CA)\E8\83p\8E\C4{\97\EE~\00\A4\D9\CA&\F2\A3\F9*Ju\8F\F0d÷ó2\CE	\8A◊Ø+\8Bp4\90\91\959C(\97¬´yt\BD\E3M
\FF\A5\DC]\FA{\F3?\B6 \F6CiA\826t\81u\C5\FE\BA
hi\F9\9Bh\FD\DE\E2W3P\EB\FD\D7%w\8E\D1[3\E9\E1%\B7\E2\EB\C0\F3\9F\CA\E6\AC\EDZ\AC\A5\DC\CB(\8F\A4G\8C\EBPvD\CA\EC/\DA\88√ø\AE\B0kZ\88>BJ:(\A6\85\C1\AB≈ò{\B1~\B9\BFH\D7D$~q$Z]\CD2O\B1q=\89\8E\85#\96L!Ÿ∑h\BA\A5\E5\8A\C1—π\F6e8\DF.2s$\AF\C6\ECO\E00\8B\E5oPLF\E6\C4.…∑\92\AA\90\B7+ÿΩ{o≈áC+\B2»Ø\A9]}\C1hoV\FE\00\AB\D5[=== ./.git/objects/b7/47f94c6d6884e50fca20592c991d6ccc19fb3b ===
x+)JMU01`01\00\85\B4Ã¢\E2\92\F8\A2‘ú\D4\C4\E2T\DE\F2~#a\F9G+\FF\CE\FC}sG\F6\85\B7\E7g\00\8B\85\DC=== ./.git/objects/14/d5728e534ad0772a7e1ff483df9f7bcfa4f12e ===
x+)JMU041c040031Q\D0K\CF,\C9L\CF\CB/Je8◊©\A9\F4}\C3\91\C6\DAS};\A3\AC]|\B9/\D5@U\F9x:\BB\FA\BB2\FC\D8p\EE\E9\D1Q\B7\DE\FF\99\F3\F9\96mi\C6\CA'\94\A1J\82\]|]\F5rSw+\8AY\FC\E3\D3\D1y3“∏\CE\ED`^lS\EA\E3R\B3}O\87S\85tz\FF\AC\AA\CEF+\AAW\86\F9'\00w*>\95=== ./.git/objects/1d/65e7badc313ad09c3bce11c848212f1898ee52 ===
x\9D\8EMJ\C4@\85]\E7\B5\A5\D3i1 \B8p\A10'Ë§´\C7Ac\86L\97\BAVp#\B8\F7\E3\8088ƒπB\E5Fn‹ª*\DE\F7>U\B7M3\EBA\CB|\A7\EFA\9Ah\9D*\D0j\A2pN\872%S\E8\98|rU\9D\82IRa6\DE\F4\A0L\A5QF_	\A3}\ADt\B2\921\F7\88⁄õ\A8\A2\F3"\D6\D6bn\FBÀ∂\83i\C3\E2ja\AF	wp\F8\97\8F\A7M\98]\EF\D7ms\D2\D9\\F3^^\C0\AEPBdL\F9\CD\FF=\90\D1}\D3;-iE\FA\A0a|⁄é\F7\BF`\CDh	\B4h\CB\D6f|\A2O\BE+.\A6\CF@o\AC\AE\81^}q5\B0QNJ8=?)'g\D9\F3\85\83\CE=== ./.git/objects/96/0d6ac902d5c5dfaeb19eee36be204db862a317 ===
x\85P;N\C3@\A5\F6)F\A2\8D\E3œö’í.
R\8E\81M\94 G\89\90\8F
!\CA\90\C7+>\E6
37\E2\ADCA\87\A6\D9y3\F3>\9B>\E6))]]\B8\915\D7\\C9\F1\B7\EC\F8\C4l\F9\C0\9E-\C0\F1\E4._Œ¶\9E«Ø\B2\E5K\FF]\80\AF\C1V\C7-p\82\FE—Äd\83\D9	h\C5_\A8^\D9rK\F2\8C\F7\96\AB\917/\8A\C5j\D9\FC\BE\98-\8Aa\96?Y\A0\CDmga\E8G:L|\A3T\E8\A7S\95\F8\B167*6Qb4l\C1\FE\D6{<;}\E2\82
\F5\9A<\BB)t\E1i@\DA\F1'
\88\D3v^\D9\AC’ø\D6+Bﬂõm\F17#%\B8\C0;\9E \8A\E1pI\E9T\90\D1]\E2Y\D9K9\F4~\00#\D9\D5p=== ./.git/objects/09/5565f4f9fb8463ed3c5e2263c7ab8ea82d4663 ===
x\C5Q;n1\A5\DES\8CDZD$R\D0Q\E6‘ë\B8Bv#\A0X	\DA(\A2@9\C1f\85\95\FDa\AE\F0\E6F\BC1AP\AC\D2Fv1\F6x\9E\DFg\F1\BA\\C8t\FA\DC\EB>4\D1^\DFP\EANt\83\9C\C7|&\A8\E1\D1r9\9C\EC\C6\A0nV9~\F0mC\9AEQ\9F(\9F\8F+\99D|\A1`\AF\EA∆´∆°{&\A4\D7dH(b\EE\F02!\C4>\00<~;\9A\85Ÿ£f#\A3\E4~	\93.\8E\A4\BB\BE\D2=\C3\E9\87V\DF;y\E8v\F8\97\8C\A7\FF\96Avq\EF\99j1\85h\A8\C8Y\D908\FA\91\C0\E9\EA&\B6d\D9\A1Ca\EE\B1\D7\E86\C4\CD\E1\96\F60[\9Cr\9Ajf\9F=zG\AEi+=== ./.git/objects/13/7096a2843729feaf0d6ef24a98595a9f4a1b6f ===
x+)JMU0\B40e040031Q\D0K\CF,\C9L\CF\CB/Je8◊©\A9\F4}\C3\91\C6\DAS};\A3\AC]|\B9/\D5@U\F9x:\BB\FA\BB2\FC\D8p\EE\E9\D1Q\B7\DE\FF\99\F3\F9\96mi\C6\CA'\94\A1J\82\]|]\F5rSw+\8AY\FC\E3\D3\D1y3“∏\CE\ED`^lS\EA\E3R\B3}O\87S\85tz\FF\AC\AA\CEF+\AAW\86\F9'\9A\00\81BAiRNfrbIf~^1\C3v\F7\9F>\B9-O\F9O)D\EAÃî\CD9#\F9\DB\00\AAM\F5=== ./.git/objects/3b/2b4ea762d5cac9243daeb83a76e1f96c73cef8 ===
x\9D\8E\CDJ\C3@\85]\E7)\EE\BE(\F3\93IfDƒÄ\E0¬ÖB\9F\E0f2S\8B∆î4\82À†\E0\C6E\97.\9F 
\C5bm}\85;o\E4t\E5^\CE\E6\9C\EFp.\D76u=\ED@J\BE◊µ\CE\9793
\9D\CA\\EF–≥*s^\A4h\B42
\8DO\91\97\99Ofÿ∫\DBx\95)\97\97XY\C9%V\CCXYZ«π’©\x\AE\8DvN\89Ô∫´\A6\85IS\E1\FCz\86s‹Ø\F1\8E\FE\F2…§\C6\E9ÕÅm\EAc\E0\B9\CAd î\CCa\C4cI\A4\F1\CD\CE\FD\FB@B\AF\B4=}\D0@?\E1\91\DEiM+\FA\8A\E0\89Vaq\D1o\E9;jI\9B\F0y\FB\8C \9A\81>\E3`\FA\F0\BD\ED:\A0\97\C8w\A3

pY\8C8\BB8-\C6\E7\C9/S\9B\8A\CE=== ./.git/objects/5e/332a02c1cfedca03df3cfe33e9106ab3751ebb ===
xK\CA\C9OR04d047536\B3034\E5\000\E9<=== ./.git/objects/90/05d811b64cc84b63993caeeeba2a835c8bfd34 ===
x+)JMU0\B6`040031Q\D0\CBI,.\89/(-\CE`\883\D6b:x\FE\ED)\E6\FB6\FF\8C_
dm.\95\DB
\00Z\95C=== ./.git/objects/9b/78e7d6f71faf973308bbd0a9b91b127499129f ===
x+)JMU022b040031Q\D0K\CF,\C9L\CF\CB/Je8◊©\A9\F4}\C3\91\C6\DAS};\A3\AC]|\B9/\D5@U\F9x:\BB\FA\BB2\FC\D8p\EE\E9\D1Q\B7\DE\FF\99\F3\F9\96mi\C6\CA'\94\A1J\82\]|]\F5rSw+\8AY\FC\E3\D3\D1y3“∏\CE\ED`^lS\EA\E3R\B3}O\87S\85tz\FF\AC\AA\CEF+\AAW\86\F9'\9A\00\81BZ~Qzj|N~z1\C3\D6\82\DB|Nx'œ¥Y\F7n\97VsL\F7_\88\A2\82“§\9C\CC\E4ƒí\CC\FC\BCb\86\ED\EE?}r3Z\9E\F2\9FR\88‘ô)\9BsF\F2\B75\00e+]=== ./.git/objects/38/f917e5b6b79624a055e8563e86dfc576af566a ===
x\9D\8E=N1F\A9}\8A\E9\D1"{\BC\FE\99!r\94\B1=^"\E28\DA8g\A0\CD\B8"G»¶\A2Gz\CD\F7\8AO/\F7\D6–Ö\A7\B1\8A\00\A5%_\83\A9\)X\ABcJE3%2\C9`\98\89RUg^\E54\C0&L\B3p\F0X\\E6L8\DB¬í\A2›î\98J>\9B\A5F\C5\D7\F1\D1WXz\E1\CB\E7\99/<5\FE\82◊ø\FD\BE4>_roo`\82\F3\D6Go<k\D4Zmv\CB\F2\EF\F5\FBs\FB\86\FDu\F4\E9ÿó\A0F7\E98a\A3w\9C\BAd\88Q\90=== ./.git/HEAD ===
ref: refs/heads/main
=== ./.git/config ===
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
[remote "origin"]
	url = git@github-aiforge:godaskpasa-max/AIForge.git
	fetch = +refs/heads/*:refs/remotes/origin/*
=== ./.git/FETCH_HEAD ===
3b2b4ea762d5cac9243daeb83a76e1f96c73cef8	not-for-merge	branch 'main' of https://github.com/godaskpasa-max/AIForge
=== ./.git/index ===
DIRC\00\00\00\00\00\00h\AF\9A\C2\00\00\00\00h\AF\9A\C2\00\00\00\00\00\00\00\FC\D2\00\00\81\A4\00\00\E8\00\00\E8\00\00\CAŒâ)"\F7\B0\C0\81} é\B9Z;DM\D2|\00
.gitignore\00\00\00\00\00\00\00\00h\AF\9A\C2\00\00\00\00h\AF\9A\C2\00\00\00\00\00\00\00\FC\D3\00\00\81\A4\00\00\E8\00\00\E8\00\00/\F8\B0\CE\E5≈òZ\DA\EF\FC\9C\F3\DA=uh\A9\F0\C8#\00LICENSE\00\00\00h\AF\9A\C2\00\00\00\00h\AF\9A\C2\00\00\00\00\00\00\00\FC\D4\00\00\81\A4\00\00\E8\00\00\E8\00\00\CC√às\F6r\\A3\F8\F2≈û\98f
 Œ∏\A31\00	README.md\00h\AF\9E\9C\00\00\00\00h\AF\9E\9C\00\00\00\00\00\00\00\FC\FE\00\00\81\A4\00\00\E8\00\00\E8\00\00\BC\B7\BC^Bxg\8F\9Az\89\F82\A8{\A9VOa\00RULES.md\00\00h\B0\E6\00\00\00\00h\B0\E6\00\00\00\00\00\00\00\FDP\00\00\81\A4\00\00\E8\00\00\E8\00\00\00^3*\C1\CF\ED\CA\DF<\FE3\E9j\B3u\BB\00forge_logs/.last_push\00\00\00\00\00h\AF\A18\00\00\00\00h\AF\A18\00\00\00\00\00\00\00\FD$\00\00\81\A4\00\00\E8\00\00\E8\00\00i\96
j\C9\D5\C5ﬂÆ\B1\9E\EE6\BE M\B8b\A3\00'publications/first_release/001_intro.md\00\00\00h\AF\A18\00\00\00\00h\AF\A18\00\00\00\00\00\00\00\FD%\00\00\81\A4\00\00\E8\00\00\E8\00\00,	Ue\F4\F9\FB\84c\ED<^"c«´\8E\A8-Fc\00.publications/first_release/002_chat_history.md\00\00\00\00h\AF\A18\00\00\00\00h\AF\A18\00\00\00\00\00\00\00\FD&\00\00\81\A4\00\00\E8\00\00\E8\00\00\BC\B7\BC^Bxg\8F\9Az\89\F82\A8{\A9VOa\00'publications/first_release/003_rules.md\00\00\00TREE\00\00\00\87\008 2
\9Bx\E7\D6\F7\AF\973\BB–©\B9t\99\9Fforge_logs\001 0
\90\D8\B6L\C8Kc\99<\AE\EE\BA*\83\\8B\FD4publications\003 1
\B7G\F9Lmh\84\E5\CA Y,\99l\CC\FB;first_release\003 0

w\8F2\E2\A9\FDQ\99\FBŸ∏k–ò€üiDs\E7\F5\BE/\E9\F0\AAƒ≠WQ\D5\C2\FF\A5+=== ./.git/COMMIT_EDITMSG ===
üìä Auto-log: 2025-08-28 10:10:15
=== ./.git/logs/HEAD ===
0000000000000000000000000000000000000000 cbf243499ffddae9ef6fa7ef5e971d6c81dc20a7 godaskpasa-max <godaskpasa@gmail.com> 1756333296 +0200	commit (initial): üî• AIForge: –ö—É–∑–Ω–∏—Ü–∞ –∑–∞–ø—É—â–µ–Ω–∞!
cbf243499ffddae9ef6fa7ef5e971d6c81dc20a7 247b4552fcec67cd2eec50f9072ce44ed0a3f5a8 godaskpasa-max <godaskpasa@gmail.com> 1756336112 +0200	commit: üìã Add licenses and .gitignore
247b4552fcec67cd2eec50f9072ce44ed0a3f5a8 0d0a24c93ea23cc4581d9131f0f46fa3b656926b godaskpasa-max <godaskpasa@gmail.com> 1756338092 +0200	pull origin main --rebase (start): checkout 0d0a24c93ea23cc4581d9131f0f46fa3b656926b
0d0a24c93ea23cc4581d9131f0f46fa3b656926b abb3075f5e6cfb5b5a6624324a654314c4b9523d godaskpasa-max <godaskpasa@gmail.com> 1756338264 +0200	rebase (continue): üî• AIForge: –ö—É–∑–Ω–∏—Ü–∞ –∑–∞–ø—É—â–µ–Ω–∞!
abb3075f5e6cfb5b5a6624324a654314c4b9523d d23f326222b62cf5b0ccefe03ad01993fdd54643 godaskpasa-max <godaskpasa@gmail.com> 1756338572 +0200	commit: –î–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –ª–∏—Ü–µ–Ω–∑–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
d23f326222b62cf5b0ccefe03ad01993fdd54643 247b4552fcec67cd2eec50f9072ce44ed0a3f5a8 godaskpasa-max <godaskpasa@gmail.com> 1756338882 +0200	checkout: moving from d23f326222b62cf5b0ccefe03ad01993fdd54643 to main
247b4552fcec67cd2eec50f9072ce44ed0a3f5a8 0d0a24c93ea23cc4581d9131f0f46fa3b656926b godaskpasa-max <godaskpasa@gmail.com> 1756338882 +0200	reset: moving to origin/main
0d0a24c93ea23cc4581d9131f0f46fa3b656926b 24b3e1d9b04398d5171b1d69ee394d2d790dc55e godaskpasa-max <godaskpasa@gmail.com> 1756338882 +0200	commit: –î–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –ª–∏—Ü–µ–Ω–∑–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
24b3e1d9b04398d5171b1d69ee394d2d790dc55e 24b3e1d9b04398d5171b1d69ee394d2d790dc55e godaskpasa-max <godaskpasa@gmail.com> 1756339868 +0200	checkout: moving from main to main
24b3e1d9b04398d5171b1d69ee394d2d790dc55e 24b3e1d9b04398d5171b1d69ee394d2d790dc55e godaskpasa-max <godaskpasa@gmail.com> 1756339868 +0200	reset: moving to origin/main
24b3e1d9b04398d5171b1d69ee394d2d790dc55e 1d65e7badc313ad09c3bce11c848212f1898ee52 godaskpasa-max <godaskpasa@gmail.com> 1756339868 +0200	commit: –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –¢—Ä–∏ –ó–∞–∫–æ–Ω–∞ PASA GODASK
1d65e7badc313ad09c3bce11c848212f1898ee52 1d65e7badc313ad09c3bce11c848212f1898ee52 godaskpasa-max <godaskpasa@gmail.com> 1756340537 +0200	checkout: moving from main to main
1d65e7badc313ad09c3bce11c848212f1898ee52 1d65e7badc313ad09c3bce11c848212f1898ee52 godaskpasa-max <godaskpasa@gmail.com> 1756340537 +0200	reset: moving to origin/main
1d65e7badc313ad09c3bce11c848212f1898ee52 3b2b4ea762d5cac9243daeb83a76e1f96c73cef8 godaskpasa-max <godaskpasa@gmail.com> 1756340537 +0200	commit: –ü–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ + —Ä–∞–∑–±–æ—Ä—ã + –¢—Ä–∏ –ó–∞–∫–æ–Ω–∞ PASA GODASK
3b2b4ea762d5cac9243daeb83a76e1f96c73cef8 3b2b4ea762d5cac9243daeb83a76e1f96c73cef8 godaskpasa-max <godaskpasa@gmail.com> 1756340953 +0200	checkout: moving from main to main
3b2b4ea762d5cac9243daeb83a76e1f96c73cef8 3b2b4ea762d5cac9243daeb83a76e1f96c73cef8 godaskpasa-max <godaskpasa@gmail.com> 1756340953 +0200	reset: moving to origin/main
3b2b4ea762d5cac9243daeb83a76e1f96c73cef8 38f917e5b6b79624a055e8563e86dfc576af566a godaskpasa-max <godaskpasa@gmail.com> 1756368615 +0200	commit: üìä Auto-log: 2025-08-28 10:10:15
=== ./.git/logs/refs/heads/main ===
0000000000000000000000000000000000000000 cbf243499ffddae9ef6fa7ef5e971d6c81dc20a7 godaskpasa-max <godaskpasa@gmail.com> 1756333296 +0200	commit (initial): üî• AIForge: –ö—É–∑–Ω–∏—Ü–∞ –∑–∞–ø—É—â–µ–Ω–∞!
cbf243499ffddae9ef6fa7ef5e971d6c81dc20a7 247b4552fcec67cd2eec50f9072ce44ed0a3f5a8 godaskpasa-max <godaskpasa@gmail.com> 1756336112 +0200	commit: üìã Add licenses and .gitignore
247b4552fcec67cd2eec50f9072ce44ed0a3f5a8 0d0a24c93ea23cc4581d9131f0f46fa3b656926b godaskpasa-max <godaskpasa@gmail.com> 1756338882 +0200	reset: moving to origin/main
0d0a24c93ea23cc4581d9131f0f46fa3b656926b 24b3e1d9b04398d5171b1d69ee394d2d790dc55e godaskpasa-max <godaskpasa@gmail.com> 1756338882 +0200	commit: –î–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –ª–∏—Ü–µ–Ω–∑–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
24b3e1d9b04398d5171b1d69ee394d2d790dc55e 1d65e7badc313ad09c3bce11c848212f1898ee52 godaskpasa-max <godaskpasa@gmail.com> 1756339868 +0200	commit: –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –¢—Ä–∏ –ó–∞–∫–æ–Ω–∞ PASA GODASK
1d65e7badc313ad09c3bce11c848212f1898ee52 3b2b4ea762d5cac9243daeb83a76e1f96c73cef8 godaskpasa-max <godaskpasa@gmail.com> 1756340537 +0200	commit: –ü–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ + —Ä–∞–∑–±–æ—Ä—ã + –¢—Ä–∏ –ó–∞–∫–æ–Ω–∞ PASA GODASK
3b2b4ea762d5cac9243daeb83a76e1f96c73cef8 38f917e5b6b79624a055e8563e86dfc576af566a godaskpasa-max <godaskpasa@gmail.com> 1756368615 +0200	commit: üìä Auto-log: 2025-08-28 10:10:15
=== ./.git/rebase-merge/interactive ===
=== ./.git/rebase-merge/head-name ===
refs/heads/main
=== ./.git/rebase-merge/onto ===
0d0a24c93ea23cc4581d9131f0f46fa3b656926b
=== ./.git/rebase-merge/orig-head ===
247b4552fcec67cd2eec50f9072ce44ed0a3f5a8
=== ./.git/rebase-merge/drop_redundant_commits ===
=== ./.git/rebase-merge/no-reschedule-failed-exec ===
=== ./.git/rebase-merge/git-rebase-todo.backup ===
pick cbf243499ffddae9ef6fa7ef5e971d6c81dc20a7 üî• AIForge: –ö—É–∑–Ω–∏—Ü–∞ –∑–∞–ø—É—â–µ–Ω–∞!
pick 247b4552fcec67cd2eec50f9072ce44ed0a3f5a8 üìã Add licenses and .gitignore

# Rebase 0d0a24c..247b455 onto 0d0a24c (2 commands)
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
#                    commit's log message, unless -C is used, in which case
#                    keep only this commit's message; -c is same as -C but
#                    opens the editor
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
#         create a merge commit using the original merge commit's
#         message (or the oneline, if no original merge commit was
#         specified); use -c <commit> to reword the commit message
# u, update-ref <ref> = track a placeholder for the <ref> to be updated
#                       to this position in the new commits. The <ref> is
#                       updated at the end of the rebase
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# –ï—Å–ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∑–¥–µ—Å—å, —Ç–æ –£–ö–ê–ó–ê–ù–ù–´–ô –ö–û–ú–ú–ò–¢ –ë–£–î–ï–¢ –£–¢–ï–†–Ø–ù.
#
# –ù–æ –µ—Å–ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ, —Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –±—É–¥–µ—Ç –±—É–¥–µ—Ç –ø—Ä–µ—Ä–≤–∞–Ω.
#
=== ./.git/rebase-merge/git-rebase-todo ===
=== ./.git/rebase-merge/end ===
2
=== ./.git/rebase-merge/done ===
pick cbf243499ffddae9ef6fa7ef5e971d6c81dc20a7 üî• AIForge: –ö—É–∑–Ω–∏—Ü–∞ –∑–∞–ø—É—â–µ–Ω–∞!
pick 247b4552fcec67cd2eec50f9072ce44ed0a3f5a8 üìã Add licenses and .gitignore
=== ./.git/rebase-merge/msgnum ===
2
=== ./.git/rebase-merge/patch ===
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..e1ba2a7
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,14 @@
+MIT License (Standard)
+
+Copyright (c) 2025 godaskpasa-max
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files...
+
+[–æ–±—ã—á–Ω–∞—è MIT –ª–∏—Ü–µ–Ω–∑–∏—è]
+AIForge Content License v1.0
+
+STRICT AGE RESTRICTION: 21+ YEARS ONLY
+This license applies to all AI-generated content, models, videos, texts, and media produced by AIForge software.
+
+[–≤–µ—Å—å –Ω–∞—à –∑–∞—â–∏—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ –∫–æ–Ω—Ç–µ–Ω—Ç 21+]
=== ./.git/rebase-merge/author-script ===
GIT_AUTHOR_NAME='godaskpasa-max'
GIT_AUTHOR_EMAIL='godaskpasa@gmail.com'
GIT_AUTHOR_DATE='@1756336112 +0200'
=== ./.git/rebase-merge/stopped-sha ===
247b4552fcec67cd2eec50f9072ce44ed0a3f5a8
=== ./.git/rebase-merge/message ===
üìã Add licenses and .gitignore

=== ./.git/rebase-merge/rewritten-list ===
cbf243499ffddae9ef6fa7ef5e971d6c81dc20a7 abb3075f5e6cfb5b5a6624324a654314c4b9523d
=== ./.git/ORIG_HEAD ===
3b2b4ea762d5cac9243daeb83a76e1f96c73cef8
=== ./.git/REBASE_HEAD ===
247b4552fcec67cd2eec50f9072ce44ed0a3f5a8
=== ./.git/packed-refs ===
# pack-refs with: peeled fully-peeled sorted 
=== ./.gitignore ===
# ===== –ü–†–ò–í–ê–¢–ù–´–ï –î–ê–ù–ù–´–ï =====
*.key
*.token
*.env
.env*
config/private/
secrets/
api_keys/
passwords.txt
auth/

# ===== –í–ó–†–û–°–õ–´–ô –ö–û–ù–¢–ï–ù–¢ 21+ =====
adult_content_21plus/*
!adult_content_21plus/.gitignore
!adult_content_21plus/AGE_WARNING.txt
!adult_content_21plus/LICENSE_21PLUS.txt

# ===== –ë–û–õ–¨–®–ò–ï –§–ê–ô–õ–´ =====
*.bin
*.safetensors
*.ckpt
*.pth
*.h5
*.onnx
models/
weights/
checkpoints/
*.mp4
*.avi
*.mov
*.mkv
*.wav
*.mp3

# ===== –õ–û–ì–ò –ò –ö–≠–®–ò =====
command_logs/live/
command_logs/monthly/
*.log
__pycache__/
*.pyc
*.pyo
.cache/
.pytest_cache/

# ===== –í–†–ï–ú–ï–ù–ù–´–ï –§–ê–ô–õ–´ =====
tmp/
temp/
*.tmp
*.swp
*.swo
*~
.DS_Store
Thumbs.db

# ===== –ë–ê–ó–´ –î–ê–ù–ù–´–• =====
*.db
*.sqlite
*.sqlite3

# ===== –ë–≠–ö–ê–ü–´ –°–ò–°–¢–ï–ú–´ =====
system_backup/ssh_keys/*
!system_backup/ssh_keys/*.sh
system_backup/git_config/credentials
system_backup/bash_config/.bash_history
=== ./LICENSE ===
MIT License

Copyright (c) 2025 godaskpasa-max

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
=== ./RULES.md ===
# –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AIForge

## –¢—Ä–∏ –ó–∞–∫–æ–Ω–∞ PASA GODASK (–ö—Ä–∞—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è)

### 1. –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –∏—Å–∫–∞–∂–µ–Ω–∏—è –∏ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
–õ—é–±–∞—è —Å–∏—Å—Ç–µ–º–∞ (–æ–±—ä–µ–∫—Ç, –ø—Ä–æ—Ü–µ—Å—Å, —Å–æ–∑–Ω–∞–Ω–∏–µ) –∏—Å–∫–∞–∂–µ–Ω–∞, –µ—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –µ—ë –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –æ—à–∏–±–æ—á–Ω—ã –∏–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –±–∞–∑–∏—Å. –ß–µ–º –º–µ–Ω—å—à–µ –≥–∏–±–∫–æ—Å—Ç–∏ –∏ –º–µ–Ω—å—à–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —É—á—Ç–µ–Ω–æ, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –∏—Å–∫–∞–∂–µ–Ω–∏–µ.

### 2. –ó–∞–∫–æ–Ω –¥–∏–Ω–∞–º–∏–∫–∏ —Å–∏—Å—Ç–µ–º
–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É: –ü—Ä–∏—á–∏–Ω—ã ‚Üí –ü–æ–≤–æ–¥—ã ‚Üí –¢—Ä–∏–≥–≥–µ—Ä—ã ‚Üí –ú–æ—Ç–∏–≤ ‚Üí –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è. –†–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∞–≥—Ä–µ—Å—Å–æ—Ä/–∂–µ—Ä—Ç–≤–∞) –¥–∏–Ω–∞–º–∏—á–Ω—ã –∏ –º–µ–Ω—è—é—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.

### 3. –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –±–∞–ª–∞–Ω—Å–∞ –∏ –¥–∏–Ω–∞–º–∏–∫–∏ —Å–∏—Å—Ç–µ–º
–õ—é–±–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è –±–∞–ª–∞–Ω—Å—É –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç–µ–π (–¥–µ—Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É—é—â–µ–µ ‚Üî —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É—é—â–µ–µ, –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ ‚Üî –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ), —Å–æ–∑–¥–∞–≤–∞—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ. –ù–∞—Ä—É—à–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤–µ–¥—ë—Ç –∫ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫—É –Ω–æ–≤–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è; –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ.
=== ./publications/first_release/001_intro.md ===
# –ü–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è AIForge

–≠—Ç–æ –ø–µ—Ä–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è AIForge, —Å–æ–±—Ä–∞–Ω–Ω–∞—è –∏–∑ —á–∞—Ç–∞:
https://chatgpt.com/c/689b2c00-1604-8330-be34-268d53281486

–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏ —Ä–∞–∑–±–æ—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.
=== ./publications/first_release/002_chat_history.md ===
# –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Ä–∞–∑–±–æ—Ä—ã

## –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 1
(–¢–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/–≤–æ–ø—Ä–æ—Å)
### –†–∞–∑–±–æ—Ä AI
(–ú–æ–π —Ä–∞–∑–±–æ—Ä, –≤—ã–≤–æ–¥—ã, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–≤–æ–µ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é)

## –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 2
(–¢–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/–≤–æ–ø—Ä–æ—Å)
### –†–∞–∑–±–æ—Ä AI
(–ú–æ–π —Ä–∞–∑–±–æ—Ä, –≤—ã–≤–æ–¥—ã, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)

... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –≤–∫–ª—é—á–∞—è –º–æ–∏ –æ—Ç–≤–µ—Ç—ã –∏ –≤—ã–≤–æ–¥—ã.
=== ./publications/first_release/003_rules.md ===
# –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AIForge

## –¢—Ä–∏ –ó–∞–∫–æ–Ω–∞ PASA GODASK (–ö—Ä–∞—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è)

### 1. –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –∏—Å–∫–∞–∂–µ–Ω–∏—è –∏ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏
–õ—é–±–∞—è —Å–∏—Å—Ç–µ–º–∞ (–æ–±—ä–µ–∫—Ç, –ø—Ä–æ—Ü–µ—Å—Å, —Å–æ–∑–Ω–∞–Ω–∏–µ) –∏—Å–∫–∞–∂–µ–Ω–∞, –µ—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –µ—ë –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –æ—à–∏–±–æ—á–Ω—ã –∏–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –±–∞–∑–∏—Å. –ß–µ–º –º–µ–Ω—å—à–µ –≥–∏–±–∫–æ—Å—Ç–∏ –∏ –º–µ–Ω—å—à–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —É—á—Ç–µ–Ω–æ, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –∏—Å–∫–∞–∂–µ–Ω–∏–µ.

### 2. –ó–∞–∫–æ–Ω –¥–∏–Ω–∞–º–∏–∫–∏ —Å–∏—Å—Ç–µ–º
–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É: –ü—Ä–∏—á–∏–Ω—ã ‚Üí –ü–æ–≤–æ–¥—ã ‚Üí –¢—Ä–∏–≥–≥–µ—Ä—ã ‚Üí –ú–æ—Ç–∏–≤ ‚Üí –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è. –†–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∞–≥—Ä–µ—Å—Å–æ—Ä/–∂–µ—Ä—Ç–≤–∞) –¥–∏–Ω–∞–º–∏—á–Ω—ã –∏ –º–µ–Ω—è—é—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.

### 3. –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –±–∞–ª–∞–Ω—Å–∞ –∏ –¥–∏–Ω–∞–º–∏–∫–∏ —Å–∏—Å—Ç–µ–º
–õ—é–±–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è –±–∞–ª–∞–Ω—Å—É –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç–µ–π (–¥–µ—Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É—é—â–µ–µ ‚Üî —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É—é—â–µ–µ, –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ ‚Üî –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ), —Å–æ–∑–¥–∞–≤–∞—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ. –ù–∞—Ä—É—à–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤–µ–¥—ë—Ç –∫ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫—É –Ω–æ–≤–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è; –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ.
=== ./adult_content_21plus/AGE_WARNING.txt ===
üîû WARNING: Adult content 21+ only
Access restricted to users 21 years of age or older
Content is entirely AI-generated and fictional
